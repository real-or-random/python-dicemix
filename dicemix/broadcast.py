"""This module defines interfaces used by DiceMix to access the network

DiceMix relies on a terminating reliable broadcast (TRB) mechanism.
This TRB mechanism must additionally authenticate the messages of peers.

The broadcast mechanism is trusted for successful termination of DiceMix but
not for sender anonymity. In other words, if the broadcast mechanism is
malicious (e.g., a corrupted server), then DiceMix may fail. However, if
DiceMix returns successfully, then sender anonymity is guaranteed even if
the broadcast mechanism is malicious.

Subclass `IBroadcastSession` and `IBroadcastSessionFactory` implement a
broadcast mechanism. `IBroadcastSession` represents a broadcast session
intended for a single DiceMix session. Broadcast sessions are generated by
instances of `IBroadcastSessionFactory`.

An example for a TRB mechanism is an IRC server. A broadcast session is a
channel on the server, created temporarily for the purpose of running DiceMix.
Peers on the IRC server can be identified by known verification keys such that
broadcast messages can be authenticated using signatures.
"""

from typing import AbstractSet, Any, Mapping, Optional

Peer = Any

class IBroadcastSession:
    """Interface for terminating reliable broadcast (TRB) with authentication

    Protocol messages are byte strings. How peers are identified depends on
    the underlying authentication mechanism. A natural example for a peer
    identifier is a verification key.

    Most broadcast messages sent and received by DiceMix need authentication.
    However, certain broadcast messages are self-authenticating and thus do
    not require additional authentication by the broadcast mechanism (however
    authentication does not hurt). These messages are indicated by the boolean
    argument `authenticated`. So the broadcast mechanism must send and receive
    authenticated messages if `authenticated` is set.
    """
    def __enter__(self):
        """Establish the TRB session."""
        raise NotImplementedError

    def __exit__(self, exc_type, exc_value, traceback):
        """Disestablish the TRB session.

        A disestablished session cannot be established again. A ValueError is
        raised if this is attempted.
        """
        raise NotImplementedError

    def broadcast(self, message: bytes, authenticated: bool) -> bool:
        """Broadcast a byte string.

        The return value indicates success.
        A ValueError is raised if the session is not established.
        """
        raise NotImplementedError

    def receive(self, peers: AbstractSet[Peer], authenticated: bool) \
            -> Mapping[Peer, Optional[bytes]]:
        """Receive byte strings from a set of peers.

        The function returns as soon every peers either sent a message or is
        determined offline.

        The return value maps peers to their byte strings, or to None in case
        of an offline peer.

        A ValueError is raised if the session is not established.
        """
        raise NotImplementedError

class IBroadcastSessionFactory:
    """Interface for factories that create broadcast sessions

    This is a class because the probability is high that it needs to keep
    state, e.g., a connection to a server.
    """
    def make_session(self,
                     session_id: bytes,
                     me: Peer,
                     peers: AbstractSet[Peer]) \
            -> IBroadcastSession:
        """Create a new session, i.e., an instance of `IBroadcastSession`"""
        raise NotImplementedError
